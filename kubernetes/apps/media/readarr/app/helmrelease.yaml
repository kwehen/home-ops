# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app readarr
spec:
  interval: 30m
  chart:
    spec:
      chart: app-template
      version: 3.7.3
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system
  install:
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      strategy: rollback
      retries: 3
  values:
    controllers:
      readarr:
        labels:
          nfsMount: "true"
          postgres: "true"
        containers:
          app:
            image:
              repository: ghcr.io/joryirving/readarr-develop
              tag: 0.4.10.2734@sha256:3ba6ee9565e841c3129b72103ffc8b2a94e58fa6e8496f0d8972cb290c6930e6
            env:
              READARR__APP__INSTANCENAME: Readarr
              READARR__APP__THEME: dark
              READARR__AUTH__METHOD: External
              READARR__AUTH__REQUIRED: DisabledForLocalAddresses
              READARR__LOG__LEVEL: info
              READARR__SERVER__PORT: &port 80
              READARR__UPDATE__BRANCH: develop
              READARR__POSTGRES__MAINDB: readarr_main
              READARR__POSTGRES__LOGDB: readarr_log
              READARR__POSTGRES__CACHEDB: readarr_cache
              TZ: ${TIMEZONE}
            envFrom:
            - secretRef:
                name: readarr-secret
            resources:
              requests:
                cpu: 25m
              limits:
                memory: 1Gi
    defaultPodOptions:
      securityContext:
        runAsNonRoot: true
        runAsUser: 3002
        runAsGroup: 3002
        fsGroup: 3003
        fsGroupChangePolicy: OnRootMismatch
        supplementalGroups: [10000]
        seccompProfile: { type: RuntimeDefault }
    service:
      app:
        controller: *app
        ports:
          http:
            port: *port
    ingress:
      app:
        className: traefik-internal
        annotations:
          traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
          traefik.ingress.kubernetes.io/router.middlewares: networking-ipwhitelist@kubernetescrd
          cert-manager.io/cluster-issuer: letsencrypt-production-internal
        hosts:
        - host: &host readarr.home.${INTERNAL_DOMAIN}
          paths:
          - path: /
            service:
              identifier: app
              port: http
        tls:
          - hosts:
              - *host
            secretName: readarr-tls
    persistence:
      config:
        existingClaim: *app
      tmp:
        type: emptyDir
      data:
        type: nfs
        server: ${NFS_SERVER_IP}
        path: ${NFS_POOL_PATH}/media
        globalMounts:
        - path: /data